name: Build
on: [push, pull_request]

env:
  CDK_APP_NAME: Conduktor
  CDK_APP_DESCRIPTION: A beautiful and fully-featured desktop client for Apache Kafka
  CDK_COPYRIGHT: Â© 2019-2020 Conduktor LLC
  CDK_VENDOR: Conduktor LLC
  CDK_JLINK_MODULES: java.base,java.se,javafx.web,javafx.media,java.desktop,java.management,java.naming,java.prefs,jdk.zipfs,jdk.unsupported,jdk.unsupported.desktop,jdk.httpserver
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"

###############################################################################

jobs:
  zip-linux:
    name: build conduktor.zip for linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk14
      - name: Fetch conduktor from Gitlab
        run: |
          git clone --single-branch --branch ${{ github.event.client_payload.tag }} --depth 1 https://osef:${{secrets.GITLAB_TOKEN}}@gitlab.com/datacumulus/conduktor/conduktor-monorepo.git

      - name: Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradlex-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradlex-
      - name: Gradle wrapper cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-wrapperx-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-wrapperx-
      - name: m2 wrapper cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2

      - name: "Build tornadofx snapshot"
        run: |
          env
          git clone --single-branch --branch jdk10 --depth 1 https://github.com/edvin/tornadofx
          cd tornadofx && mvn install -Dmaven.test.skip=true

      - name: build conduktor.zip
        working-directory: conduktor-monorepo
        run: echo "version=${{ github.event.client_payload.version }}" >> gradle.properties && ./gradlew --build-cache --stacktrace distZip

      - name: publish artifact
        uses: actions/upload-artifact@v1
        with:
          name: conduktor-linux
          path: "./conduktor-monorepo/desktop/build/distributions/conduktor-${{ github.event.client_payload.version }}.zip"

  zip-windows:
    name: build conduktor.zip for windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk14
      - name: Fetch conduktor from Gitlab
        run: |
          git clone --single-branch --branch ${{ github.event.client_payload.tag }} --depth 1 https://osef:${{secrets.GITLAB_TOKEN}}@gitlab.com/datacumulus/conduktor/conduktor-monorepo.git

      - name: Gradle cache
        uses: actions/cache@v1
        with:
          path: ~\.gradle\caches
          key: ${{ runner.os }}-gradlex-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradlex-
      - name: Gradle wrapper cache
        uses: actions/cache@v1
        with:
          path: ~\.gradle\wrapper
          key: ${{ runner.os }}-wrapperx-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-wrapperx-
      - name: m2 wrapper cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2

      - name: "Build tornadofx snapshot"
        shell: bash
        run: |
          env
          git clone --single-branch --branch jdk10 --depth 1 https://github.com/edvin/tornadofx
          cd tornadofx && mvn install -Dmaven.test.skip=true

      - name: build conduktor.zip
        shell: bash
        working-directory: conduktor-monorepo
        run: echo "version=${{ github.event.client_payload.version }}" >> gradle.properties && ./gradlew --build-cache --stacktrace distZip -x test

      - name: publish artifact
        uses: actions/upload-artifact@v1
        with:
          name: conduktor-windows
          path: "./conduktor-monorepo/desktop/build/distributions/conduktor-${{ github.event.client_payload.version }}.zip"

  zip-macos:
    name: build conduktor.zip for macos
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk14
      - name: Fetch conduktor from Gitlab
        run: |
          git clone --single-branch --branch ${{ github.event.client_payload.tag }} --depth 1 https://osef:${{secrets.GITLAB_TOKEN}}@gitlab.com/datacumulus/conduktor/conduktor-monorepo.git

      - name: Clean up existing cache
        run: rm -rf ~/.gradle/caches/*
      - name: Gradle cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradlexx-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradlexx-
      - name: Gradle wrapper cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/wrapper
          key: ${{ runner.os }}-wrapperxx-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-wrapperxx-
      - name: m2 wrapper cache
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2

      - name: "Build tornadofx snapshot"
        run: |
          env
          git clone --single-branch --branch jdk10 --depth 1 https://github.com/edvin/tornadofx
          cd tornadofx && mvn install -Dmaven.test.skip=true

      - name: build conduktor.zip
        working-directory: conduktor-monorepo
        run: echo "version=${{ github.event.client_payload.version }}" >> gradle.properties && ./gradlew --build-cache --stacktrace distZip

      - name: publish artifact
        uses: actions/upload-artifact@v1
        with:
          name: conduktor-macos
          path: "./conduktor-monorepo/desktop/build/distributions/conduktor-${{ github.event.client_payload.version }}.zip"

  ###############################################################################

  macos:
    runs-on: macos-latest
    needs: zip-macos

    steps:
      - uses: actions/checkout@v2
      - uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk14

      - name: Download built distribution
        uses: actions/download-artifact@v1
        with:
          name: conduktor-macos

      - name: Build macOS packages
        run: |
          unzip conduktor-macos/conduktor-${{ github.event.client_payload.version }}.zip
          .github/scripts/macos.sh ${{ github.event.client_payload.version }}

      - name: Prepare upload
        run: |
          mkdir -p macos
          mv ${{ env.CDK_APP_NAME }}-${{ github.event.client_payload.version }}.pkg macos
          mv ${{ env.CDK_APP_NAME }}-${{ github.event.client_payload.version }}.dmg macos

      - name: Upload macOS .pkg & .dmg
        uses: actions/upload-artifact@v1
        with:
          name: macos
          path: macos

  ###############################################################################

  linux:
    runs-on: ubuntu-latest
    needs: zip-linux

    steps:
      - uses: actions/checkout@v2
      - uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk14

      - name: Download built distribution
        uses: actions/download-artifact@v1
        with:
          name: conduktor-linux

      - name: Build Linux packages
        run: |
          unzip conduktor-linux/conduktor-${{ github.event.client_payload.version }}.zip
          .github/scripts/linux.sh ${{ github.event.client_payload.version }}

      - name: Prepare upload
        run: |
          mkdir -p linux
          mv ${{ env.CDK_APP_NAME }}-${{ github.event.client_payload.version }}.deb linux
          mv ${{ env.CDK_APP_NAME }}-${{ github.event.client_payload.version }}.rpm linux

      - name: Upload Linux .deb & .rpm
        uses: actions/upload-artifact@v1
        with:
          name: linux
          path: linux

  ###############################################################################

  windows:
    runs-on: windows-latest
    needs: zip-windows

    steps:
      - uses: actions/checkout@v2
      - uses: joschi/setup-jdk@v1
        with:
          java-version: openjdk14

      - name: Download built distribution
        uses: actions/download-artifact@v1
        with:
          name: conduktor-windows

      - name: Build Windows packages
        shell: bash
        run: |
          unzip conduktor-windows/conduktor-${{ github.event.client_payload.version }}.zip
          .github/scripts/windows.sh ${{ github.event.client_payload.version }}

      - name: Prepare upload
        shell: bash
        run: |
          mkdir -p windows
          mv ${{ env.CDK_APP_NAME }}-${{ github.event.client_payload.version }}.exe windows
          mv ${{ env.CDK_APP_NAME }}-${{ github.event.client_payload.version }}.msi windows

      - name: Upload Windows .msi and .exe
        uses: actions/upload-artifact@v1
        with:
          name: windows
          path: windows

  ###############################################################################

  release:
    name: "Prepare Github Release"
    runs-on: ubuntu-latest
    needs: [linux, windows, macos]
    steps:
      - uses: actions/checkout@v2
      - name: Fetch conduktor from Gitlab
        run: |
          git clone --branch ${{ github.event.client_payload.tag }} https://osef:${{secrets.GITLAB_TOKEN}}@gitlab.com/datacumulus/conduktor/conduktor-monorepo.git

      - name: "Config Github release"
        run: ../.github/scripts/release.sh ${{ github.event.client_payload.version }}
        id: create_release_body
        working-directory: conduktor-monorepo

      - uses: actions/download-artifact@v1
        with:
          name: conduktor-windows
      - uses: actions/download-artifact@v1
        with:
          name: conduktor-macos
      - uses: actions/download-artifact@v1
        with:
          name: conduktor-linux
      - uses: actions/download-artifact@v1
        with:
          name: macos
      - uses: actions/download-artifact@v1
        with:
          name: linux
      - uses: actions/download-artifact@v1
        with:
          name: windows

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.client_payload.tag }}
          release_name: ${{ steps.create_release_body.outputs.name }}
          draft: false
          prerelease: false
          body: ${{ steps.create_release_body.outputs.body }}

      - name: Upload macOS .pkg
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/Conduktor-${{ github.event.client_payload.version }}.pkg
          asset_name: Conduktor-${{ github.event.client_payload.version }}.pkg
          asset_content_type: application/x-newton-compatible-pkg

      - name: Upload Windows .msi
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/Conduktor-${{ github.event.client_payload.version }}.msi
          asset_name: Conduktor-${{ github.event.client_payload.version }}.msi
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload macOS .dmg
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos/Conduktor-${{ github.event.client_payload.version }}.dmg
          asset_name: Conduktor-${{ github.event.client_payload.version }}.dmg
          asset_content_type: application/x-apple-diskimage

      - name: Upload Windows .exe
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows/Conduktor-${{ github.event.client_payload.version }}.exe
          asset_name: Conduktor-${{ github.event.client_payload.version }}.exe
          asset_content_type: application/x-apple-diskimage

      - name: Upload Linux  .deb
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/Conduktor-${{ github.event.client_payload.version }}.deb
          asset_name: Conduktor-${{ github.event.client_payload.version }}.deb
          asset_content_type: vnd.debian.binary-package

      - name: Linux .zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./conduktor-linux/conduktor-${{ github.event.client_payload.version }}.zip
          asset_name: Conduktor-linux-${{ github.event.client_payload.version }}.zip
          asset_content_type: application/zip

      - name: Windows .zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./conduktor-windows/conduktor-${{ github.event.client_payload.version }}.zip
          asset_name: Conduktor-win-${{ github.event.client_payload.version }}.zip
          asset_content_type: application/zip

      - name: Upload macOS .zip
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./conduktor-macos/conduktor-${{ github.event.client_payload.version }}.zip
          asset_name: Conduktor-macOS-${{ github.event.client_payload.version }}.zip
          asset_content_type: application/zip

      - name: Upload Linux  .rpm
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux/Conduktor-${{ github.event.client_payload.version }}.rpm
          asset_name: Conduktor-${{ github.event.client_payload.version }}.rpm
          asset_content_type: application/x-redhat-package-manager

      - name: Update links
        run: .github/scripts/update-links.sh ${{ secrets.REBRANDLY_TOKEN }} ${{ github.event.client_payload.version }}

      - name: Update DO
        env:
          DO_KEY: ${{ secrets.DO_KEY }}
          DO_SECRET: ${{ secrets.DO_SECRET }}
          DO_TOKEN: ${{ secrets.DO_TOKEN }}
        run: |
          wget -q https://github.com/digitalocean/doctl/releases/download/v1.39.0/doctl-1.39.0-linux-amd64.tar.gz
          tar xf doctl-1.39.0-linux-amd64.tar.gz
          wget -q https://github.com/s3tools/s3cmd/releases/download/v2.0.2/s3cmd-2.0.2.tar.gz
          tar xf s3cmd-2.0.2.tar.gz
          sudo apt-get install -y python-dateutil
          echo ${{ github.event.client_payload.version }} > latest
          cat > ${{ github.event.client_payload.version }}.md <<-EOF
          ${{ steps.create_release_body.outputs.body }}
          EOF
          ./s3cmd-2.0.2/s3cmd --access_key="$DO_KEY" --secret_key="$DO_SECRET" --host sfo2.digitaloceanspaces.com --host-bucket="%(bucket)s.sfo2.digitaloceanspaces.com" get s3://conduktor/releases/all all
          echo ${{ github.event.client_payload.version }} >> all
          ./s3cmd-2.0.2/s3cmd --access_key="$DO_KEY" --secret_key="$DO_SECRET" --host sfo2.digitaloceanspaces.com --host-bucket="%(bucket)s.sfo2.digitaloceanspaces.com" sync all s3://conduktor/releases/all --acl-public
          ./s3cmd-2.0.2/s3cmd --access_key="$DO_KEY" --secret_key="$DO_SECRET" --host sfo2.digitaloceanspaces.com --host-bucket="%(bucket)s.sfo2.digitaloceanspaces.com" sync latest s3://conduktor/releases/latest --acl-public
          ./s3cmd-2.0.2/s3cmd --access_key="$DO_KEY" --secret_key="$DO_SECRET" --host sfo2.digitaloceanspaces.com --host-bucket="%(bucket)s.sfo2.digitaloceanspaces.com" put ${{ github.event.client_payload.version }}.md s3://conduktor/releases/ --acl-public
          ./doctl compute cdn flush --access-token $DO_TOKEN f219a472-61e3-40ab-b762-8588a06055d2 --files [releases/latest]
          ./doctl compute cdn flush --access-token $DO_TOKEN f219a472-61e3-40ab-b762-8588a06055d2 --files [releases/all]

      - name: Slack notification
        uses: 8398a7/action-slack@v2
        if: always()
        with:
          status: ${{ job.status }}
          username: Github Actions
          icon_emoji: ":octocat:"
          text: ${{ github.event.client_payload.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
